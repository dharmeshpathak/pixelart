{"version":3,"sources":["Pixel.js","Row.js","DrawingPanel.js","Editor.js","App.js","reportWebVitals.js","index.js"],"names":["Pixel","props","selectedColor","useState","pixelColor","setPixelColor","oldColor","setOldColor","canChangeColor","setCanChangeColor","onClick","className","onMouseEnter","onMouseLeave","style","background","Row","width","pixels","i","push","DrawingPanel","height","panelRef","useRef","rows","id","ref","exportComponentAsPNG","Editor","panelWidth","setPanelWidth","panelHeight","setPanelHeight","hideOptions","setHideOptions","hideDrawingPanel","setHideDrawingPanel","buttonText","setButtonText","setColor","type","defaultValue","onChange","e","target","value","color","onChangeComplete","hex","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2776c557.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport \"./pixel.css\";\r\n function Pixel(props) {\r\n    const {selectedColor} = props;\r\n    const [pixelColor, setPixelColor] = useState(\"#fff\")\r\n  const [oldColor, setOldColor] = useState(pixelColor)\r\n  const [canChangeColor, setCanChangeColor] = useState(true)\r\n   \r\n  function applyColor(){\r\n       setPixelColor(selectedColor);\r\n       setCanChangeColor(false);\r\n   }\r\n   function changeColorOnHover(){\r\n       setOldColor(pixelColor);\r\n       setPixelColor(selectedColor);\r\n   }\r\n  \r\n   function resetColor(){\r\n       if(canChangeColor){\r\n           setPixelColor(oldColor);\r\n       }\r\n       setCanChangeColor(true);\r\n   }\r\n  return (\r\n        <div onClick = {applyColor} className = \"pixel\" onMouseEnter = {changeColorOnHover} onMouseLeave = {resetColor} style ={{background:pixelColor}}>\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default Pixel;","import React from 'react'\r\nimport Pixel from \"./Pixel\";\r\n import \"./row.css\";\r\n\r\n\r\nexport default function Row(props) {\r\n  const { width, selectedColor } = props;\r\n\r\n  let pixels = [];\r\n\r\n  for (let i = 0; i < width; i++) {\r\n    pixels.push(<Pixel key={i} selectedColor={selectedColor} />);\r\n  }\r\n\r\n  return <div className=\"row\">{pixels}</div>;\r\n}\r\n\r\n","import React, { useRef } from \"react\";\r\nimport \"./drawingPanel.css\";\r\nimport Row from \"./Row\";\r\n\r\n\r\n\r\nimport { exportComponentAsPNG } from \"react-component-export-image\";\r\n\r\nexport default function DrawingPanel(props) {\r\n  const { width, height, selectedColor } = props;\r\n\r\n  const panelRef = useRef();\r\n\r\n  let rows = [];\r\n\r\n  for (let i = 0; i < height; i++) {\r\n    rows.push(<Row key={i} width={width} selectedColor={selectedColor} />);\r\n  }\r\n\r\n  return (\r\n    <div id=\"drawingPanel\">\r\n      <div id=\"pixels\" ref={panelRef}>\r\n        {rows}\r\n      </div>\r\n      <button onClick={() => exportComponentAsPNG(panelRef)} className=\"button\">\r\n        Export as PNG\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"./editor.css\";\r\nimport { CirclePicker } from \"react-color\";\r\nimport DrawingPanel from \"./DrawingPanel\";\r\n\r\nexport default function Editor() {\r\n  const [panelWidth, setPanelWidth] = useState(16);\r\n  const [panelHeight, setPanelHeight] = useState(16);\r\n  const [hideOptions, setHideOptions] = useState(false);\r\n  const [hideDrawingPanel, setHideDrawingPanel] = useState(true);\r\n  const [buttonText, setButtonText] = useState(\"start drawing\");\r\n  const [selectedColor, setColor] = useState(\"#f44336\");\r\n\r\n  function initializeDrawingPanel() {\r\n    setHideOptions(!hideOptions);\r\n    setHideDrawingPanel(!hideDrawingPanel);\r\n\r\n    buttonText === \"start drawing\"\r\n      ? setButtonText(\"reset\")\r\n      : setButtonText(\"start drawing\");\r\n  }\r\n\r\n  function changeColor(color) {\r\n    setColor(color.hex);\r\n  }\r\n\r\n  return (\r\n    <div id=\"editor\">\r\n      <h1>Pixel Editor</h1>\r\n      {hideDrawingPanel && <h2>Enter Panel Dimensions</h2>}\r\n      {hideDrawingPanel && (\r\n        <div id=\"options\">\r\n          <div className=\"option\">\r\n            <input\r\n              type=\"number\"\r\n              className=\"panelInput\"\r\n              defaultValue={panelWidth}\r\n              onChange={(e) => {\r\n                setPanelWidth(e.target.value);\r\n              }}\r\n            />\r\n            <span>Width</span>\r\n          </div>\r\n          <div className=\"option\">\r\n            <input\r\n              type=\"number\"\r\n              className=\"panelInput\"\r\n              defaultValue={panelHeight}\r\n              onChange={(e) => {\r\n                setPanelHeight(e.target.value);\r\n              }}\r\n            />\r\n            <span>Height</span>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <button onClick={initializeDrawingPanel} className=\"button\">\r\n        {buttonText}\r\n      </button>\r\n\r\n      {hideOptions && (\r\n        <CirclePicker color={selectedColor} onChangeComplete={changeColor} />\r\n      )}\r\n\r\n      {hideOptions && (\r\n        <DrawingPanel\r\n          width={panelWidth}\r\n          height={panelHeight}\r\n          selectedColor={selectedColor}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","// import logo from './logo.svg';\nimport './App.css';\n import Editor from \"./Editor\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Editor/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}